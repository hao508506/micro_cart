// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/cart/cart.proto

package cart

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Cart service

func NewCartEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Cart service

type CartService interface {
	AddCart(ctx context.Context, in *CartInfo, opts ...client.CallOption) (*CartResponse, error)
	CleanCart(ctx context.Context, in *CleanInfo, opts ...client.CallOption) (*Response, error)
	IncrItem(ctx context.Context, in *ItemInfo, opts ...client.CallOption) (*Response, error)
	DecrItem(ctx context.Context, in *ItemInfo, opts ...client.CallOption) (*Response, error)
	DeleteItemById(ctx context.Context, in *CartIdRequest, opts ...client.CallOption) (*Response, error)
	GetAllCart(ctx context.Context, in *FindAllRequest, opts ...client.CallOption) (*FindAllResponse, error)
}

type cartService struct {
	c    client.Client
	name string
}

func NewCartService(name string, c client.Client) CartService {
	return &cartService{
		c:    c,
		name: name,
	}
}

func (c *cartService) AddCart(ctx context.Context, in *CartInfo, opts ...client.CallOption) (*CartResponse, error) {
	req := c.c.NewRequest(c.name, "Cart.AddCart", in)
	out := new(CartResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartService) CleanCart(ctx context.Context, in *CleanInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Cart.CleanCart", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartService) IncrItem(ctx context.Context, in *ItemInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Cart.IncrItem", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartService) DecrItem(ctx context.Context, in *ItemInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Cart.DecrItem", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartService) DeleteItemById(ctx context.Context, in *CartIdRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Cart.DeleteItemById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartService) GetAllCart(ctx context.Context, in *FindAllRequest, opts ...client.CallOption) (*FindAllResponse, error) {
	req := c.c.NewRequest(c.name, "Cart.GetAllCart", in)
	out := new(FindAllResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Cart service

type CartHandler interface {
	AddCart(context.Context, *CartInfo, *CartResponse) error
	CleanCart(context.Context, *CleanInfo, *Response) error
	IncrItem(context.Context, *ItemInfo, *Response) error
	DecrItem(context.Context, *ItemInfo, *Response) error
	DeleteItemById(context.Context, *CartIdRequest, *Response) error
	GetAllCart(context.Context, *FindAllRequest, *FindAllResponse) error
}

func RegisterCartHandler(s server.Server, hdlr CartHandler, opts ...server.HandlerOption) error {
	type cart interface {
		AddCart(ctx context.Context, in *CartInfo, out *CartResponse) error
		CleanCart(ctx context.Context, in *CleanInfo, out *Response) error
		IncrItem(ctx context.Context, in *ItemInfo, out *Response) error
		DecrItem(ctx context.Context, in *ItemInfo, out *Response) error
		DeleteItemById(ctx context.Context, in *CartIdRequest, out *Response) error
		GetAllCart(ctx context.Context, in *FindAllRequest, out *FindAllResponse) error
	}
	type Cart struct {
		cart
	}
	h := &cartHandler{hdlr}
	return s.Handle(s.NewHandler(&Cart{h}, opts...))
}

type cartHandler struct {
	CartHandler
}

func (h *cartHandler) AddCart(ctx context.Context, in *CartInfo, out *CartResponse) error {
	return h.CartHandler.AddCart(ctx, in, out)
}

func (h *cartHandler) CleanCart(ctx context.Context, in *CleanInfo, out *Response) error {
	return h.CartHandler.CleanCart(ctx, in, out)
}

func (h *cartHandler) IncrItem(ctx context.Context, in *ItemInfo, out *Response) error {
	return h.CartHandler.IncrItem(ctx, in, out)
}

func (h *cartHandler) DecrItem(ctx context.Context, in *ItemInfo, out *Response) error {
	return h.CartHandler.DecrItem(ctx, in, out)
}

func (h *cartHandler) DeleteItemById(ctx context.Context, in *CartIdRequest, out *Response) error {
	return h.CartHandler.DeleteItemById(ctx, in, out)
}

func (h *cartHandler) GetAllCart(ctx context.Context, in *FindAllRequest, out *FindAllResponse) error {
	return h.CartHandler.GetAllCart(ctx, in, out)
}
